{
    "version": "https://jsonfeed.org/version/1",
    "title": "Camber's Logistics | Archive • All posts by \"tech\" category",
    "description": "Camber物流 | 存档处",
    "home_page_url": "https://camber.moe",
    "items": [
        {
            "id": "https://camber.moe/2020/GitRevised/",
            "url": "https://camber.moe/2020/GitRevised/",
            "title": "Things about Git",
            "date_published": "2020-06-17T02:08:22.000Z",
            "content_html": "<!--# Things about Git - 20200616-->\n\n<h2 id=\"0x00-碎碎念\"><a href=\"#0x00-碎碎念\" class=\"headerlink\" title=\"0x00 碎碎念\"></a>0x00 碎碎念</h2><p>想写一个Revised version <del>KISS</del> manual of Git.<br>主要是, 最近拱拱大学开了门叫做[开源硬件开发与应用]的课程, 然后好多人对Git不熟.<br>基于拱拱的个人经验, 写了一篇<a href=\"https://github.com/CamberLoid/xd0615/blob/master/1-Notes/Git_Related.md\" target=\"_blank\" rel=\"noopener\">Git Related</a>, 但是那个是<strong>极其随意写的</strong>.<br>在知识范围内, 这篇会稍微详细一些.  </p>\n<p>说在前头, 拱拱推荐Linux的另一个原因是, <strong>中文化</strong>. <a href=\"#on-windows-subsystem-linux\">See why</a> </p>\n<h2 id=\"0x01-Installing-Git\"><a href=\"#0x01-Installing-Git\" class=\"headerlink\" title=\"0x01 Installing Git\"></a>0x01 Installing Git</h2><h3 id=\"On-Windows\"><a href=\"#On-Windows\" class=\"headerlink\" title=\"On Windows\"></a>On Windows</h3><p>从Git-scm下载Git套件, 安装.<br>Windows 10 Insider Build可以在Powershell下使用<code>winget</code>下载: <code>winget install Git.Git</code>.(好像是这个, 不保证准确性)</p>\n<h3 id=\"On-Windows-Subsystem-Linux\"><a href=\"#On-Windows-Subsystem-Linux\" class=\"headerlink\" title=\"On Windows Subsystem Linux\"></a>On Windows Subsystem Linux</h3><p>Windows Subsystem Linux or WSL是Windows10的一个特性, 可以在Windows上原生使用Linux于终端执行Linux二进制文件. Linux的一个优点是环境配置极其方便, <strong>拱拱推荐这种方式.</strong><br>在<code>启用和删除Windows功能</code>上把<code>适用于Windows的Linux子系统</code>勾选上, 重启电脑后去Windows store搜索下载Ubuntu(推荐)即可使用. WSL配置过程参考此链接 <a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/windows/wsl/</a> .  </p>\n<p>有Linux环境就好说了, Ubuntu自带OpenSSH套件和Git. 即使如此仍然推荐下载Windows的Git-scm套件.<br>对于Ubuntu, 中文支持需要<code>language-pack-zh-hans</code>这个包, <strong>包括Git的主要输出都会中文化</strong>. 安装<code>sudo apt update; sudo apt install language-pack-zh-hans</code>.<br>需要访问本地Windows的文件的话, 他们一般在<code>/mnt/盘符</code>处.</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><p>都用上Linux了拱拱觉得也不需要说啥了, 一般发行版都有Git套件的.<br>不过总有人用最小发行版, 这时候可以使用对应发行版的包管理器安装. <del>拱拱就不信有发行版仓库没有Git</del></p>\n<h3 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h3><p>你需要苹果的XCode命令行套件, 具体去哪找拱拱也不清楚. </p>\n<h2 id=\"0x02-OpenSSH-相关配置\"><a href=\"#0x02-OpenSSH-相关配置\" class=\"headerlink\" title=\"0x02 OpenSSH 相关配置\"></a>0x02 OpenSSH 相关配置</h2><p>Windows 10 自带OpenSSH套件.<br>要用到的主要命令是<code>ssh-keygen</code>.<br>一般直接就这么输入进命令行就行了. 可以不用带任何参数.</p>\n<p>跑完后你会得到一个 私钥文件 <code>id_rsa</code> / 公钥文件 <code>id_rsa.pub</code>, 位于<code>~/.ssh/</code><br>在Windows下<code>~</code> = <code>C:\\Users\\你用户名\\</code><br>在Linux下<code>~</code> = <code>/home/你用户名</code> (如果是root账户的话就是<code>/root/</code>)</p>\n<h3 id=\"Github相关\"><a href=\"#Github相关\" class=\"headerlink\" title=\"Github相关\"></a>Github相关</h3><p>Github 在处理用户鉴权时, 使用SSH公钥或HTTPS认证.<br>也就意味着你的远端可以是 <code>git@github.com/后略</code>[ssh] 或者 <code>https://github.com/后略</code>[https]</p>\n<p>使用SSH公钥时, 前往 <a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/keys</a> 将得到的<code>id_rsa.pub</code>内容复制粘帖到New SSH key中.<br>使用HTTPS认证时, 一般不需要做什么, 但就是在处理私有仓库(Private Repo)或者Push时会有一个交互, 让你填写用户名和密码. <strong>拱拱本人不推荐这个方式.</strong>  </p>\n<h2 id=\"0x03-Git-基本配置和食用方法\"><a href=\"#0x03-Git-基本配置和食用方法\" class=\"headerlink\" title=\"0x03 Git 基本配置和食用方法\"></a>0x03 Git 基本配置和食用方法</h2><p>对于Completely Beginner, Git相关知识无非就这些</p>\n<p>初始化工作区:  </p>\n<ul>\n<li>复制别人的: <code>git clone</code></li>\n<li>从头开始: <code>git init</code></li>\n</ul>\n<p>在工作区上工作:</p>\n<ul>\n<li>一般暂存: <code>git add</code> </li>\n<li>其他: <code>git mv</code> / <code>git restore</code> / <code>git rm</code></li>\n</ul>\n<p>提交更改:</p>\n<ul>\n<li>一般情况: <code>git commit</code></li>\n<li>出冲突了: <code>git merge</code></li>\n</ul>\n<p>和远端同步:</p>\n<ul>\n<li>同步远端元数据: <code>git fetch</code></li>\n<li>一推一拉: <code>git push</code>/<code>git pull</code></li>\n</ul>\n<p>以及修改配置:  </p>\n<ul>\n<li><code>git config</code></li>\n</ul>\n<h3 id=\"初次运行前要做的配置\"><a href=\"#初次运行前要做的配置\" class=\"headerlink\" title=\"初次运行前要做的配置\"></a>初次运行前要做的配置</h3><p>主要使用<code>git config</code>命令.</p>\n<p>在Commit前需要设置邮箱和名字:<br><code>git config --global user.name &quot;你名字, 可以是中文&quot;</code><br><code>git config --global user.email &quot;你邮箱&quot;</code></p>\n<p>Git的默认文本编辑器是<code>vi</code>/<code>vim</code>. 如果vim使不来的话, 可以更换默认文本编辑器<br><code>git config --global core.editor &quot;中略&quot;</code><br>参考<a href=\"https://help.github.com/cn/github/using-git/associating-text-editors-with-git\" target=\"_blank\" rel=\"noopener\">Github的这篇中文化文档</a>以获得关于如何配置的资讯.<br>私货: 这里推荐VSCode[GUI/图形界面] 和nano[CLI/命令行界面]</p>\n<h3 id=\"初始化工作区\"><a href=\"#初始化工作区\" class=\"headerlink\" title=\"初始化工作区\"></a>初始化工作区</h3><p>这里主要使用<code>git init</code>和<code>git clone</code>两个命令.  </p>\n<p>Git-clone用于当远端已有一个仓库时, 将远端仓库原样拉取下来. 适合在加入他人工作时, 要从Github上拉源码编译软件时使用.<br>这会在当前工作目录(如果没有参数的话)创建一个和远端仓库同名的文件夹. 如果已有同名文件夹, 则<strong>要求该文件夹为空</strong>, 否则将克隆失败.<br>食用方法: <code>git clone &lt;remote-url&gt;</code></p>\n<p>Git-init适合用于没有远端时, 将本地已有的文件夹转换为Git版本控制仓库.<br>如要配置一个Git服务器, 也可以使用<code>git init --bare</code>创建空仓库.<br>在创建仓库后不要忘记添加远端哦.</p>\n<h3 id=\"在工作区作出更改\"><a href=\"#在工作区作出更改\" class=\"headerlink\" title=\"在工作区作出更改\"></a>在工作区作出更改</h3><p>基本操作是<code>git add</code>, 用于<em>暂存</em>文件 和 <code>git commit</code>, 用于提交修改.<br>此外还有<code>git rm</code>, 用于<em>删除</em>文件 和 <code>git restore</code>, 用于丢弃工作区改动 以及 <code>git mv</code>, 用于移动文件<br>检查当前仓库状态<code>git status</code></p>\n<p>基本食用方法: (没写到的建议自己查文档, 毕竟真的没怎么用过)  </p>\n<ul>\n<li><code>git add 你要的文件</code>: 可以直接<code>git add .</code>或者<code>git add *</code>将所有已经于保存的更改暂存, <strong>但是容易导致奇怪的问题所以在这么做前先确认下</strong>.  </li>\n<li><code>git rm 要删除的文件</code>: 可以先删除文件后rm(删了但之后再记入暂存), 也可以直接<code>git rm</code>(就直接删了记入暂存一步到位). <del><code>git rm *</code>一键删库跑路</del></li>\n<li><code>git commit -m &quot;提交信息&quot;</code>, 可以不带<code>-m</code>但这会导致你在提交时到一个文本编辑器界面. 如果忘记配置默认文本编辑器的话, 他默认文本编辑器是vi, 一键进入地狱难度.<br>携带<code>--allow-empty-message</code>参数可以允许一个信息为空的提交. <strong>但是不推荐, 极有可能会被其他同行追着打, 实在没东西写了再用.</strong><br>如果提交后发现了啥失误, 比如多暂存了, 或者信息填错了, 不用担心. 你可以接着进行更改, 然后在提交时带上<code>--amend</code>参数. 这样上一个提交就会被这一个提交<strong>替代</strong>.</li>\n</ul>\n<p>此外, 可以在仓库根目录下放个<code>.gitignore</code>文件, 这样Git处理的时候就会<strong>直接忽略他们</strong>. 你不会希望你密码/API密钥出现在公开的记录里的.</p>\n<h3 id=\"配置远端\"><a href=\"#配置远端\" class=\"headerlink\" title=\"配置远端\"></a>配置远端</h3><p>和远端相关的是Git-remote模块.  </p>\n<p>Git是<strong>分布式</strong>版本管理软件, 意味着远端可以<strong>不止一个</strong>.<br>如果你的仓库是从Github克隆下来并且只使用Github的话, 请跳过本节. 但在远端不止一个, 或者没有远端需要配置远端相关信息的时候, 你会用到Git-remote模块的. </p>\n<p>通过执行<code>git remote --verbose</code>, 你应该会看到类似与如下的输出:</p>\n<pre><code>origin  git@github.com:camberloid/camber.moe (fetch)\norigin  git@github.com:camberloid/camber.moe (push)</code></pre><p>需要添加远端时, 使用<code>git remote add [远端别名] [URL]</code>.<br>如果不小心写错了, 或者远端地址发生更改, 使用<code>git remote set-url [远端别名] [新URL]</code>来更改. </p>\n<p>常用的操作就这些, 更多操作建议查文档. 在操作后记得<code>git fetch --all</code>验证远端是否可用.<br>当然, 如果远端咕咕了, 想删掉的话, 请使用<code>git remote delete [远端别名]</code></p>\n<h3 id=\"与远端同步\"><a href=\"#与远端同步\" class=\"headerlink\" title=\"与远端同步\"></a>与远端同步</h3><p>一推(push)一拉(pull), 组成了Git的远端同步部分.</p>\n<p><code>git push</code>用于向远端推送你已经<em>提交</em>(commit)的更改. 请注意只能在<strong>自己已经没有任何更改可以拉取, 并且本地最新更改不晚于远端最新提交的更改</strong>(窝觉得用<code>最新</code>不妥)的情况下推送.<br><code>git pull</code>用于从远端拉取最新的更改.如果出现了文件冲突, 可以参考<code>Git merge</code>相关文档. 拱拱没用过所以就不说了.  </p>\n<p>从Git 2.26还是27开始, 执行<code>git pull</code>时有如下提示:  </p>\n<pre><code>warning: 不建议在没有为偏离分支指定合并策略时执行 pull 操作。 您可以在执行下一次  \npull 操作之前执行下面一条命令来抑制本消息：\n\ngit config pull.rebase false  # 合并（缺省策略） \ngit config pull.rebase true   # 变基  \ngit config pull.ff only       # 仅快进  \n\n您可以将 &quot;git config&quot; 替换为 &quot;git config --global&quot; 以便为所有仓库设置  \n缺省的配置项。您也可以在每次执行 pull 命令时添加 --rebase、--no-rebase，  \n或者 --ff-only 参数覆盖缺省设置。</code></pre><p>窝也没有去了解那么多. 如有需要可以阅读相关文档.</p>\n<h3 id=\"合并冲突\"><a href=\"#合并冲突\" class=\"headerlink\" title=\"合并冲突\"></a>合并冲突</h3><p>其实不会/用不熟.<br>这里放个Ref: <a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6\" target=\"_blank\" rel=\"noopener\">分支的新建与合并</a>  </p>\n<!-- Legacy -->\n\n<!-- /Legacy -->\n\n<h2 id=\"0x04-Bash\"><a href=\"#0x04-Bash\" class=\"headerlink\" title=\"0x04 Bash\"></a>0x04 Bash</h2><p>其实我完全忘了Git-scm的Windows套件有Bash.<br>但也不懂怎么教, 故Pass.</p>\n<h2 id=\"0xFD-VSCode-相关\"><a href=\"#0xFD-VSCode-相关\" class=\"headerlink\" title=\"0xFD VSCode 相关\"></a>0xFD VSCode 相关</h2><p>VSCode有一个<em>源代码管理</em>部分. 可以基本替代Git CLI使用.<br>他张这个样子:<br><img src=\"/images/Git_and_OSH/Screenshot_20200617_002910.png\" alt=\"image\"></p>\n<p>可以简单地: 填写消息, 暂存/撤销更改, 提交更改, 拉取和推送等. 是的拱拱就是在安利呢. </p>\n<h2 id=\"0xFE-vim相关\"><a href=\"#0xFE-vim相关\" class=\"headerlink\" title=\"0xFE vim相关\"></a>0xFE vim相关</h2><p>声明: 拱拱使不来.  </p>\n<p>最基本的操作是</p>\n<ul>\n<li><code>i</code>: 进入编辑模式, 按下<code>Esc</code>退出</li>\n<li><code>:wq</code>: 保存后退出</li>\n<li><code>:q</code>: 一般退出</li>\n<li><code>:q!</code>: 不保存退出/强制退出</li>\n</ul>\n<h2 id=\"0xFF-GPG相关\"><a href=\"#0xFF-GPG相关\" class=\"headerlink\" title=\"0xFF GPG相关\"></a>0xFF GPG相关</h2><p>GPG的作用是证明 <strong>你是你自己</strong>. 哲学的基本问题.<br>对于Git, GPG可以对你提交的更改生成一个签名, 以证明<strong>这是你提交的</strong>. 有的人就是比较Care这件事. </p>\n<p>如果你没有PGP密钥对, 使用<code>gpg --full-generate-key</code>跟着提示走创建一组.<br>如果使用Github, 使用<code>gpg --armor --export</code>导出公钥后前往<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">Github的GPG设置</a>页面在添加PGP公钥原样粘贴上去.<br>然后<code>gpg --list-keys</code>把<code>pub</code>下面那行记下(复制), 在git-config中加上 <code>user.signingkey &quot;刚才复制的那行&quot;</code>, <code>commit.gpgsign=true</code>. 就好了. </p>\n<p>如果需要验证的话, 提交个更改, 推送到Github, 在你仓库网页中的<code>commit</code>一栏出现这么些东西, 你就成功了.<br><img src=\"/images/Git_and_OSH/Screenshot_20200617_005321.png\" alt=\"\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>[1] <a href=\"https://help.github.com/cn/github\" target=\"_blank\" rel=\"noopener\">https://help.github.com/cn/github</a> 来自Github的中文文档.<br>[2] <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2</a> 来自Git-scm的中文教程. 他们的Reference是英文的.</p>\n<p>拱拱 / Camber / Billy Huang<br>点子开始于20200614, 完成于20200616, 发布于20200617.</p>\n",
            "tags": []
        }
    ]
}