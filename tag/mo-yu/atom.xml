<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://logistics.camber.moe</id>
    <title>Camber&#39;s Logistics | Archive • Posts by &#34;mo-yu&#34; tag</title>
    <link href="https://logistics.camber.moe" />
    <updated>2019-01-27T16:00:00.000Z</updated>
    <category term="Algorithm" />
    <category term="RAW" />
    <category term="Memo" />
    <category term="Searching" />
    <category term="咕咕咕, 想不出来, 随笔" />
    <category term="Mo-Yu" />
    <entry>
        <id>https://logistics.camber.moe/2019/memo-day5-RAW/</id>
        <title>memo.day5.RAW</title>
        <link rel="alternate" href="https://logistics.camber.moe/2019/memo-day5-RAW/"/>
        <content type="html">&lt;p&gt;// C++大法好，我选择Python&lt;br&gt;// D.R.G. == Delete Rayark Games&lt;br&gt;没错我说的就是Cytus II &lt;/p&gt;
&lt;p&gt;Index:&lt;br&gt;数论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;素数&lt;/li&gt;
&lt;li&gt;欧几里得&lt;/li&gt;
&lt;li&gt;同余&lt;/li&gt;
&lt;li&gt;积性函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Day5-6-数论基础&#34;&gt;&lt;a href=&#34;#Day5-6-数论基础&#34; class=&#34;headerlink&#34; title=&#34;Day5/6 / 数论基础&#34;&gt;&lt;/a&gt;Day5/6 / 数论基础&lt;/h1&gt;&lt;h2 id=&#34;素数-筛法判断&#34;&gt;&lt;a href=&#34;#素数-筛法判断&#34; class=&#34;headerlink&#34; title=&#34;素数 - 筛法判断&#34;&gt;&lt;/a&gt;素数 - 筛法判断&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;埃拉托斯特尼筛法:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算整数区间[2，n]中的所有素数的最为简便的筛法&lt;br&gt;预处理时间复杂度为O(n * log log n) 空间复杂度为O(n)&lt;br&gt;合数是作为素数的倍数被筛去  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;欧拉筛法:&lt;br&gt;&lt;del&gt;(事实上都写的这个)略&lt;/del&gt;代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;py3&#34;&gt;# Prime Generator with Euler.
notPrime = [False]*1000005
Prime = []
for i in range(2,1000005):
 if not notPrime[i]: Prime.append(i)
 for ii in Prime:
     if ii == 1: continue
     if i * ii &amp;gt; 1000000: break
     notPrime[i*ii] = True
     if i % ii == 0: break&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;概括: 欧拉的原理是遍历+乘&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和素数筛相关的&lt;strong&gt;不要使用Python(cPython)&lt;/strong&gt;，会T的飞起，尤其是ZOJ&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Goldbach-Conjecture&#34;&gt;&lt;a href=&#34;#Goldbach-Conjecture&#34; class=&#34;headerlink&#34; title=&#34;Goldbach Conjecture&#34;&gt;&lt;/a&gt;Goldbach Conjecture&lt;/h3&gt;&lt;p&gt;(Link)[localhost]&lt;br&gt;[-] &lt;del&gt;待做题&lt;/del&gt; 换OJ过了&lt;br&gt;Python 不适合数据量大的题&lt;br&gt;&lt;del&gt;你妈的 为什么&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;题面:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个大于4的偶数可以写成两个奇素数的和。&lt;br&gt;例如：8=3+5，3和5都是奇素数；而20=3+17=7+13；42=5+37=11+31=13+29=19+23。&lt;br&gt;现在哥德巴赫猜想仍然没有被证明是否正确。现在请您证明对所有小于一百万的偶数，哥德巴赫猜想成立  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;dl&gt;&lt;dt&gt;做法&lt;br&gt;: 预处理 1 - 数据范围 的素数 存入数组&lt;/dt&gt;&lt;dd&gt;遍历查询是否都为素数&lt;/dd&gt;&lt;/dl&gt;&lt;h3 id=&#34;Summation-of-Four-Primes&#34;&gt;&lt;a href=&#34;#Summation-of-Four-Primes&#34; class=&#34;headerlink&#34; title=&#34;Summation of Four Primes&#34;&gt;&lt;/a&gt;Summation of Four Primes&lt;/h3&gt;&lt;blockquote&gt;
&lt;dl&gt;&lt;dt&gt;每个数字是否可以表示成4个素数的总和&lt;br&gt;[-] Accepted /w c++&lt;br&gt;[-] Summarize&lt;br&gt;[ ] Summarize&lt;br&gt;分析&lt;/dt&gt;&lt;dd&gt;哥德巴赫猜想的拓展  &lt;/dd&gt;&lt;/dl&gt;&lt;/blockquote&gt;
&lt;dl&gt;&lt;dt&gt;做法&lt;br&gt;: (类比于哥德巴赫猜想)预处理&lt;/dt&gt;&lt;dd&gt;遍历查询&lt;/dd&gt;&lt;/dl&gt;&lt;h3 id=&#34;Digit-Prime&#34;&gt;&lt;a href=&#34;#Digit-Prime&#34; class=&#34;headerlink&#34; title=&#34;Digit Prime&#34;&gt;&lt;/a&gt;Digit Prime&lt;/h3&gt;&lt;p&gt;[-] 所以Python会T飞 &amp;amp;&amp;amp; C++ AC&lt;br&gt;欧拉&lt;del&gt;欧拉欧拉欧拉欧拉欧拉欧拉&lt;/del&gt; &lt;del&gt;(唐突JoJo)&lt;/del&gt;&lt;br&gt;+ 多离线处理一次&lt;/p&gt;
&lt;h2 id=&#34;素数-试除法与Miller-Rabin法-同余&#34;&gt;&lt;a href=&#34;#素数-试除法与Miller-Rabin法-同余&#34; class=&#34;headerlink&#34; title=&#34;素数 - 试除法与Miller-Rabin法(同余)&#34;&gt;&lt;/a&gt;素数 - 试除法与Miller-Rabin法(同余)&lt;/h2&gt;&lt;p&gt;[ ]待补全&lt;/p&gt;
&lt;h3 id=&#34;Miller-Rabin&#34;&gt;&lt;a href=&#34;#Miller-Rabin&#34; class=&#34;headerlink&#34; title=&#34;Miller-Rabin&#34;&gt;&lt;/a&gt;Miller-Rabin&lt;/h3&gt;&lt;p&gt;[ ]待补全&lt;/p&gt;
&lt;h3 id=&#34;PrimeSeq&#34;&gt;&lt;a href=&#34;#PrimeSeq&#34; class=&#34;headerlink&#34; title=&#34;PrimeSeq&#34;&gt;&lt;/a&gt;PrimeSeq&lt;/h3&gt;&lt;p&gt;[ ]待写题&lt;/p&gt;
&lt;h2 id=&#34;不定方程和同余方程&#34;&gt;&lt;a href=&#34;#不定方程和同余方程&#34; class=&#34;headerlink&#34; title=&#34;不定方程和同余方程&#34;&gt;&lt;/a&gt;不定方程和同余方程&lt;/h2&gt;&lt;h3 id=&#34;Background&#34;&gt;&lt;a href=&#34;#Background&#34; class=&#34;headerlink&#34; title=&#34;Background&#34;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;blockquote&gt;
&lt;dl&gt;&lt;dt&gt;线性组合: 如果a和b都是整数，则ax+by是a和b的线性组合，其中数x和y是整数&lt;br&gt;定理&lt;br&gt;: 如果a和b都是整数，且a和b不全为0&lt;/dt&gt;&lt;dd&gt;则GCD(a, b) 是a和b的线性组合中最小正整数。&lt;/dd&gt;&lt;/dl&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;最大公约数和不定方程&#34;&gt;&lt;a href=&#34;#最大公约数和不定方程&#34; class=&#34;headerlink&#34; title=&#34;最大公约数和不定方程&#34;&gt;&lt;/a&gt;最大公约数和不定方程&lt;/h3&gt;&lt;p&gt;####GCD()&lt;br&gt;代码:  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;py3&#34;&gt;def gcd(a,b):
    return b if a == 0 else gcd(b%a,a)
    # a if b == 0 else gcd(b,a%b)&lt;/code&gt;&lt;/pre&gt;
&lt;dl&gt;&lt;dt&gt;证明&lt;/dt&gt;&lt;dd&gt;&lt;strong&gt;关键&lt;/strong&gt; 证明&lt;code&gt;gcd(a,b)&lt;/code&gt;与&lt;code&gt;gcd(b%a,a)&lt;/code&gt;可互相整除  &lt;/dd&gt;&lt;/dl&gt;&lt;h4 id=&#34;Happy-2006&#34;&gt;&lt;a href=&#34;#Happy-2006&#34; class=&#34;headerlink&#34; title=&#34;Happy 2006&#34;&gt;&lt;/a&gt;Happy 2006&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;如果两个正整数的GCD是1，则称这两个正整数是互素的&lt;br&gt;要求: 对于给出的整数m，找到按升序排列的第K个和m互素的整数&lt;br&gt;[ ] 待补完&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解:&lt;br&gt;本题互质分两类: 小于m的和大于m的&lt;br&gt;由题解，对其分析&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1,3,...,n-1
n+1,n+3,...n-1+n
2n+1,2n+3,...,n-1+2n
...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以此类推，可知其具有周期性&lt;br&gt;+  考虑%==0关系 &amp;lt;-&amp;gt; 坑&lt;/p&gt;
&lt;h4 id=&#34;exGCD&#34;&gt;&lt;a href=&#34;#exGCD&#34; class=&#34;headerlink&#34; title=&#34;exGCD()&#34;&gt;&lt;/a&gt;exGCD()&lt;/h4&gt;&lt;p&gt;[ ]待补完&lt;br&gt;[ ]模逆元&lt;/p&gt;
&lt;p&gt;代码 / Reference 数论的编程实验.pptx p34&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;Python&#34;&gt;# Note 模运算的结果一定比双方都小
# 计算量小可以使用python交题
def ext_euclid(a, b):
     if b == 0: return 1, 0, a  #
     else: 
         x, y, q = ext_euclid(b, a % b) # q = gcd(a, b) = gcd(b, a%b)
         # x, y 表示原线性方程的整根
         # 直到递归到达底层前都不会被处理
         x, y = y, (x - (a // b) * y)
         # 
         return x, y, q&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;定理:   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义: 如果a和b都是整数，则ax+by是a和b的&lt;em&gt;线性组合&lt;em&gt;，其中数x和y是整数&lt;br&gt;定理: 如果a和b都是整数，且a和b不全为0，则GCD(a, b) 是a和b的&lt;/em&gt;线性组合中最小正整数&lt;/em&gt;&lt;br&gt;::即对于ax+by, gcd(a,b)为上式最小值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bezout定理&lt;/strong&gt;: 如果a和b都是整数，则有整数x和y使得ax+by= GCD(a, b)&lt;br&gt;&lt;strong&gt;推论&lt;/strong&gt;: 整数a和b互素当且仅当存在整数x和y使得ax+by=1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模逆元:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定理: 对ax+by=c,设a, b和c都是整数&lt;br&gt;如果c不是GCD(a, b)的倍数，则不定方程ax+by=c没有整数解&lt;br&gt;如果c是GCD(a, b)的倍数，则不定方程ax+by=c有&lt;strong&gt;无穷多&lt;/strong&gt;整数解  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接上: 如果(x0, y0)是ax+by=c的一个整数解&lt;br&gt;则ax+by=c的所有整数解是x= x0+ k *(b // GCD(a, b))，y= y0-k *(a // GCD(a, b))，其中k是整数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用/摘抄:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给出ax+by=c 其中a，b和c是整数常量，x和y是整数变量&lt;br&gt;要求计算方程的整数根(x, y)&lt;br&gt;对于不定方程ax+by=c，如果c不是GCD(a, b)的倍数，则不定方程无解&lt;br&gt;否则扩展的欧几里得算法用于求解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在求线性组合ax+by，找a,b的公约数时, 找符合条件的c  &lt;/li&gt;
&lt;li&gt;对方程 ax+by = gcd(a, b)&lt;br&gt;exgcd可以用于求解不定方程的&lt;del&gt;最小&lt;/del&gt;整数解 or 判断是否有整数解&lt;br&gt;[-]&lt;del&gt;有且只有一个？&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;The-equation&#34;&gt;&lt;a href=&#34;#The-equation&#34; class=&#34;headerlink&#34; title=&#34;The equation&#34;&gt;&lt;/a&gt;The equation&lt;/h5&gt;&lt;p&gt;[ ] 不想写，没OJ&lt;/p&gt;
&lt;h3 id=&#34;同余方程和同余方程组&#34;&gt;&lt;a href=&#34;#同余方程和同余方程组&#34; class=&#34;headerlink&#34; title=&#34;同余方程和同余方程组&#34;&gt;&lt;/a&gt;同余方程和同余方程组&lt;/h3&gt;&lt;h4 id=&#34;同余&#34;&gt;&lt;a href=&#34;#同余&#34; class=&#34;headerlink&#34; title=&#34;同余&#34;&gt;&lt;/a&gt;同余&lt;/h4&gt;&lt;p&gt;定义1:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给出一个正整数m和两个整数a和b&lt;br&gt;如果((a-b) %m)=0，则称a和b模m&lt;strong&gt;同余&lt;/strong&gt;，记为a≡b(%m)。&lt;br&gt;如果((a-b) %m)!=0，则称a模m不同余于b。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定理:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;定理3.2.2.1.&lt;/strong&gt; 给出一个正整数m和两个整数a和b，((a-b) % m)=0当且仅当(iff)存在整数k,a=b+km&lt;br&gt;2. 在一个同余式两边同时做加法、减法或乘法，依然保持同余&lt;br&gt;3. 给出一个正整数m和三个整数a, b和c，a≡b(mod m), 则: a+c≡b+c (mod m); a-c≡b-c (mod m);  ac≡bc (mod m)&lt;br&gt;4. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由上可得出mod法规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(a+b)% p= (a%p+b%p)%p &amp;lt;1&amp;gt;&lt;br&gt;(a–b)% p= (a%p–b%p)%p &amp;lt;2&amp;gt;&lt;br&gt;(a*b)% p= (a%p*b%p)%p &amp;lt;3&amp;gt;&lt;br&gt;(a^b)% p= ((a &lt;strong&gt;%p&lt;/strong&gt;)^b)%p &amp;lt;4&amp;gt;&lt;br&gt;((a+b)%p+c)%p=(a+(b+c)%p)%p  &amp;lt;5&amp;gt;&lt;br&gt;((ab)%p*c)%p=(a*(bc)%p)%p &amp;lt;6&amp;gt;&lt;br&gt;交换律&amp;lt;7/8&amp;gt;&lt;br&gt;((a +b)% p * c) % p = ((a * c) % p + (b * c) % p) % p &amp;lt;9&amp;gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;Raising-Modulo-Numbers-破OJ-1995&#34;&gt;&lt;a href=&#34;#Raising-Modulo-Numbers-破OJ-1995&#34; class=&#34;headerlink&#34; title=&#34;Raising Modulo Numbers / 破OJ 1995&#34;&gt;&lt;/a&gt;Raising Modulo Numbers / 破OJ 1995&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;题意: 给出n对数字$A_i$和$B_i$; 以及一个整数M&lt;br&gt;求解: $(A1^B1+A2^B2+…+An^Bn) mod M$&lt;br&gt;输入: Z个测试用例 ,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[ ]题解待写&lt;br&gt;[ ]光靠这题还是搞不懂同余的作用(模法除外)&lt;br&gt;[-]Accepted&lt;/p&gt;
&lt;h4 id=&#34;一元线性同余方程&#34;&gt;&lt;a href=&#34;#一元线性同余方程&#34; class=&#34;headerlink&#34; title=&#34;一元线性同余方程&#34;&gt;&lt;/a&gt;一元线性同余方程&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;定义3.2.2.2 形如ax≡b(mod m)的&lt;em&gt;同余式&lt;/em&gt;被称为&lt;strong&gt;一元线性同余方程，&lt;/strong&gt;&lt;br&gt;其中a和b是整数，m是正整数，x未知整数  &lt;/p&gt;
&lt;p&gt;定理3.2.2.4 &amp;lt;!关于解&amp;gt; 对关于x的&lt;strong&gt;一元线性同余方程&lt;/strong&gt;&lt;code&gt;ax≡b(mod m)&lt;/code&gt;&lt;br&gt;设a和b是整数，m是正整数，且&lt;code&gt;GCD(a, m)==d&lt;/code&gt;&lt;br&gt;如果&lt;code&gt;b mod d != 0&lt;/code&gt;，则ax≡b(mod m)无解&lt;br&gt;如果&lt;code&gt;b mod d == 0&lt;/code&gt;，则ax≡b(mod m)恰有&lt;strong&gt;d个模m不同余&lt;/strong&gt;的解。  &lt;/p&gt;
&lt;p&gt;推论3.2.2.3 如果GCD(a, m)=1，则一次同余式ax+b≡0(mod m)有解   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;由定理 3.2.2.4，对于一元线性同余方程ax≡b(mod m)，计算x的算法如下&lt;br&gt;步骤1：应用&lt;strong&gt;欧几里得算法和扩展的欧几里得算法&lt;/strong&gt;分别计算d=GCD(a, m)和d=ax’+my’的解(x’, y’)，其中x’是ax’≡d(mod m)的解   &amp;lt;= gcd(a,m)=ax’+my’&lt;br&gt;步骤2：如果b mod d!=0，则ax≡b(mod m)无解；&lt;br&gt;否则存在d个模m不同余的解，其中第一个解$x0=x’*(b DIV d) mod m$&lt;br&gt;其余的d-1解是$xi=(x0+i*(m DIV d)) mod m，1≤i≤d-1$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;C-Looooooooooooops&#34;&gt;&lt;a href=&#34;#C-Looooooooooooops&#34; class=&#34;headerlink&#34; title=&#34;C Looooooooooooops&#34;&gt;&lt;/a&gt;C Looooooooooooops&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;有关同余关系的实验&lt;/strong&gt;&lt;br&gt;题面: POJ 2115  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给出了一个C语言风格类型的循环：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;for(variable = A; variable != B; variable += C)
      statement;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;即一个循环(中略)我们要知道语句执行多少次，本题设定所有的算术运算都是在以2k为模的k位无符号整数类型（值0 ≤ x&amp;lt;2k）上进行。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[ ]同余关系 理解不能&lt;/p&gt;
&lt;h4 id=&#34;同余方程组&#34;&gt;&lt;a href=&#34;#同余方程组&#34; class=&#34;headerlink&#34; title=&#34;同余方程组&#34;&gt;&lt;/a&gt;同余方程组&lt;/h4&gt;&lt;p&gt;中国剩余定理&lt;/p&gt;
&lt;h3 id=&#34;特殊的同余式&#34;&gt;&lt;a href=&#34;#特殊的同余式&#34; class=&#34;headerlink&#34; title=&#34;特殊的同余式&#34;&gt;&lt;/a&gt;特殊的同余式&lt;/h3&gt;&lt;h4 id=&#34;威尔逊定理和费马小定理&#34;&gt;&lt;a href=&#34;#威尔逊定理和费马小定理&#34; class=&#34;headerlink&#34; title=&#34;威尔逊定理和费马小定理&#34;&gt;&lt;/a&gt;威尔逊定理和费马小定理&lt;/h4&gt;&lt;p&gt;引理1:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;p是素数，正整数a是其自身模p的逆当且仅当a≡1(mod p)或a≡-1(mod p)&lt;br&gt;[ ]证明 待补全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;威尔逊定理&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果p是素数，则(p-1)!≡-1(mod p)&lt;br&gt;== 若p为质数，则p可整除(p-1)!+1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;YAPTCHA&#34;&gt;&lt;a href=&#34;#YAPTCHA&#34; class=&#34;headerlink&#34; title=&#34;YAPTCHA&#34;&gt;&lt;/a&gt;YAPTCHA&lt;/h4&gt;&lt;p&gt;// 原题解析有问题&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;费马小定理&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果p是素数，a是正整数，且GCD(a, p)=1，则a^(p-1)≡1 (mod p)&lt;br&gt;==&amp;gt;若p为质数&amp;amp;&amp;amp;a,b互质, 则p可整除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;What-day-is-that-day&#34;&gt;&lt;a href=&#34;#What-day-is-that-day&#34; class=&#34;headerlink&#34; title=&#34;What day is that day&#34;&gt;&lt;/a&gt;What day is that day&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;伪素数&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&#34;欧拉定理-P106&#34;&gt;&lt;a href=&#34;#欧拉定理-P106&#34; class=&#34;headerlink&#34; title=&#34;欧拉定理 / P106&#34;&gt;&lt;/a&gt;欧拉定理 / P106&lt;/h4&gt;&lt;p&gt;定义3.3.3.1: 设n是一个正整数。&lt;strong&gt;欧拉𝜑函数$𝜑(n)$&lt;/strong&gt;是不超过n且与n互素的正整数的个数&lt;br&gt;定义3.3.3.2: &lt;em&gt;模n&lt;/em&gt;的&lt;strong&gt;既约剩余系&lt;/strong&gt;是由$𝜑(𝑛)$个整数构成的集合，集合中的&lt;em&gt;每个元素均与n*&lt;/em&gt;互素***，且任何两个元素模n不同余。&lt;br&gt;理解: &lt;/p&gt;
&lt;p&gt;定理3.3.1: pass&lt;br&gt;定理3.3.5/欧拉定理: 若n和a互素且为正整数，则$a^(𝜑(𝑛))≡1(mod n)$&lt;br&gt;推论3.3.1: 若n和a互素且为正整数，则$a^(𝜑(𝑛)+1)≡a(mod n)$&lt;/p&gt;
&lt;h2 id=&#34;积性函数&#34;&gt;&lt;a href=&#34;#积性函数&#34; class=&#34;headerlink&#34; title=&#34;积性函数&#34;&gt;&lt;/a&gt;积性函数&lt;/h2&gt;&lt;h3 id=&#34;欧拉函数&#34;&gt;&lt;a href=&#34;#欧拉函数&#34; class=&#34;headerlink&#34; title=&#34;欧拉函数&#34;&gt;&lt;/a&gt;欧拉函数&lt;/h3&gt;&lt;p&gt;定义3.4.1/算术函数: 所有在正整数上运算的函数都被称为算术函数&lt;br&gt;定义3.4.2/积性函数:&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果算术函数f对任意两个互素的正整数a和b，f(𝑎𝑏)=𝑓(𝑎)𝑓(𝑏)，则f被称为&lt;strong&gt;积性函数（或乘性函数）&lt;/strong&gt;&lt;br&gt;如果对任意两个正整数a和b，f(𝑎𝑏)=𝑓(𝑎)𝑓(𝑏)，则f被称为&lt;strong&gt;完全积性函数（或完全乘性函数）&lt;/strong&gt;(和上面的不同是没有对&lt;strong&gt;互素&lt;/strong&gt;的要求)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由上:&lt;br&gt;定理3.4.1 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果f是一个积性函数, n是一个正整数, 且n有素幂因子分解n = (p_1)^(a_1)(p_2)^(a_2)…(p_m)^(a_m)&lt;br&gt;则f(n) = f((p_1)^(a_1))f((p_2)^(a_2))..f((p_m)^(a_m))  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义3.4.3 欧拉函数 见上 + 欧拉函数是一个积性函数&lt;br&gt;定理3.4.2 若a是素数 𝜑(𝑛)=n-1 否则𝜑(𝑛) &amp;lt; n-1&lt;br&gt;定理3.4.3 𝜑函数&lt;strong&gt;公式&lt;/strong&gt;: &lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h4 id=&#34;Relatives&#34;&gt;&lt;a href=&#34;#Relatives&#34; class=&#34;headerlink&#34; title=&#34;Relatives&#34;&gt;&lt;/a&gt;Relatives&lt;/h4&gt;&lt;h4 id=&#34;Primitive-Roots&#34;&gt;&lt;a href=&#34;#Primitive-Roots&#34; class=&#34;headerlink&#34; title=&#34;Primitive Roots&#34;&gt;&lt;/a&gt;Primitive Roots&lt;/h4&gt;&lt;h3 id=&#34;莫比乌斯&#34;&gt;&lt;a href=&#34;#莫比乌斯&#34; class=&#34;headerlink&#34; title=&#34;莫比乌斯&#34;&gt;&lt;/a&gt;莫比乌斯&lt;/h3&gt;&lt;h4 id=&#34;Sky-Code&#34;&gt;&lt;a href=&#34;#Sky-Code&#34; class=&#34;headerlink&#34; title=&#34;Sky Code&#34;&gt;&lt;/a&gt;Sky Code&lt;/h4&gt;&lt;p&gt;+容斥原理&lt;/p&gt;
</content>
        <category term="Mo-Yu" />
        <updated>2019-01-27T16:00:00.000Z</updated>
    </entry>
</feed>
